version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: habitpilot-db
    environment:
      POSTGRES_USER: ${DB_USER:-habitpilot}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-habitpilot123}
      POSTGRES_DB: ${DB_NAME:-habitpilot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - habitpilot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-habitpilot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session management
  redis:
    image: redis:7-alpine
    container_name: habitpilot-redis
    ports:
      - "6379:6379"
    networks:
      - habitpilot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: habitpilot-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-habitpilot}:${DB_PASSWORD:-habitpilot123}@postgres:5432/${DB_NAME:-habitpilot}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "3001:3001"
    networks:
      - habitpilot-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: habitpilot-frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
      REACT_APP_ENVIRONMENT: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    networks:
      - habitpilot-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: habitpilot-nginx
    profiles: ["production"]
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - habitpilot-network

networks:
  habitpilot-network:
    driver: bridge

volumes:
  postgres_data: